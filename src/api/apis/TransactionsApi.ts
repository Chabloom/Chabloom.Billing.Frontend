/* tslint:disable */
/* eslint-disable */
/**
 * Chabloom Payments
 * Chabloom Payments v1 API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TransactionViewModel,
    TransactionViewModelFromJSON,
    TransactionViewModelToJSON,
} from '../models';

export interface ApiTransactionsIdGetRequest {
    id: string;
}

export interface ApiTransactionsPostRequest {
    transactionViewModel?: TransactionViewModel;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     */
    async apiTransactionsGetRaw(): Promise<runtime.ApiResponse<Array<TransactionViewModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionViewModelFromJSON));
    }

    /**
     */
    async apiTransactionsGet(): Promise<Array<TransactionViewModel>> {
        const response = await this.apiTransactionsGetRaw();
        return await response.value();
    }

    /**
     */
    async apiTransactionsIdGetRaw(requestParameters: ApiTransactionsIdGetRequest): Promise<runtime.ApiResponse<TransactionViewModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTransactionsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Transactions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTransactionsIdGet(requestParameters: ApiTransactionsIdGetRequest): Promise<TransactionViewModel> {
        const response = await this.apiTransactionsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTransactionsPostRaw(requestParameters: ApiTransactionsPostRequest): Promise<runtime.ApiResponse<TransactionViewModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Transactions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionViewModelToJSON(requestParameters.transactionViewModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTransactionsPost(requestParameters: ApiTransactionsPostRequest): Promise<TransactionViewModel> {
        const response = await this.apiTransactionsPostRaw(requestParameters);
        return await response.value();
    }

}
