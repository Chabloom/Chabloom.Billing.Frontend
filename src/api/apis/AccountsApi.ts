/* tslint:disable */
/* eslint-disable */
/**
 * Chabloom Payments
 * Chabloom Payments v1 API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccountViewModel,
    AccountViewModelFromJSON,
    AccountViewModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiAccountsIdGetRequest {
    id: string;
}

export interface ApiAccountsIdPutRequest {
    id: string;
    accountViewModel?: AccountViewModel;
}

export interface ApiAccountsPostRequest {
    accountViewModel?: AccountViewModel;
}

/**
 * AccountsApi - interface
 * 
 * @export
 * @interface AccountsApiInterface
 */
export interface AccountsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    apiAccountsGetRaw(): Promise<runtime.ApiResponse<Array<AccountViewModel>>>;

    /**
     */
    apiAccountsGet(): Promise<Array<AccountViewModel>>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    apiAccountsIdGetRaw(requestParameters: ApiAccountsIdGetRequest): Promise<runtime.ApiResponse<AccountViewModel>>;

    /**
     */
    apiAccountsIdGet(requestParameters: ApiAccountsIdGetRequest): Promise<AccountViewModel>;

    /**
     * 
     * @param {string} id 
     * @param {AccountViewModel} [accountViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    apiAccountsIdPutRaw(requestParameters: ApiAccountsIdPutRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiAccountsIdPut(requestParameters: ApiAccountsIdPutRequest): Promise<void>;

    /**
     * 
     * @param {AccountViewModel} [accountViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    apiAccountsPostRaw(requestParameters: ApiAccountsPostRequest): Promise<runtime.ApiResponse<AccountViewModel>>;

    /**
     */
    apiAccountsPost(requestParameters: ApiAccountsPostRequest): Promise<AccountViewModel>;

}

/**
 * 
 */
export class AccountsApi extends runtime.BaseAPI implements AccountsApiInterface {

    /**
     */
    async apiAccountsGetRaw(): Promise<runtime.ApiResponse<Array<AccountViewModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Accounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AccountViewModelFromJSON));
    }

    /**
     */
    async apiAccountsGet(): Promise<Array<AccountViewModel>> {
        const response = await this.apiAccountsGetRaw();
        return await response.value();
    }

    /**
     */
    async apiAccountsIdGetRaw(requestParameters: ApiAccountsIdGetRequest): Promise<runtime.ApiResponse<AccountViewModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAccountsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountsIdGet(requestParameters: ApiAccountsIdGetRequest): Promise<AccountViewModel> {
        const response = await this.apiAccountsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiAccountsIdPutRaw(requestParameters: ApiAccountsIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiAccountsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Accounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccountViewModelToJSON(requestParameters.accountViewModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiAccountsIdPut(requestParameters: ApiAccountsIdPutRequest): Promise<void> {
        await this.apiAccountsIdPutRaw(requestParameters);
    }

    /**
     */
    async apiAccountsPostRaw(requestParameters: ApiAccountsPostRequest): Promise<runtime.ApiResponse<AccountViewModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Accounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountViewModelToJSON(requestParameters.accountViewModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiAccountsPost(requestParameters: ApiAccountsPostRequest): Promise<AccountViewModel> {
        const response = await this.apiAccountsPostRaw(requestParameters);
        return await response.value();
    }

}
