/* tslint:disable */
/* eslint-disable */
/**
 * Chabloom Payments
 * Chabloom Payments v1 API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BillViewModel,
    BillViewModelFromJSON,
    BillViewModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiBillsIdGetRequest {
    id: string;
}

export interface ApiBillsIdPutRequest {
    id: string;
    billViewModel?: BillViewModel;
}

export interface ApiBillsPostRequest {
    billViewModel?: BillViewModel;
}

/**
 * 
 */
export class BillsApi extends runtime.BaseAPI {

    /**
     */
    async apiBillsGetRaw(): Promise<runtime.ApiResponse<Array<BillViewModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BillViewModelFromJSON));
    }

    /**
     */
    async apiBillsGet(): Promise<Array<BillViewModel>> {
        const response = await this.apiBillsGetRaw();
        return await response.value();
    }

    /**
     */
    async apiBillsIdGetRaw(requestParameters: ApiBillsIdGetRequest): Promise<runtime.ApiResponse<BillViewModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBillsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BillViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBillsIdGet(requestParameters: ApiBillsIdGetRequest): Promise<BillViewModel> {
        const response = await this.apiBillsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiBillsIdPutRaw(requestParameters: ApiBillsIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiBillsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Bills/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BillViewModelToJSON(requestParameters.billViewModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiBillsIdPut(requestParameters: ApiBillsIdPutRequest): Promise<void> {
        await this.apiBillsIdPutRaw(requestParameters);
    }

    /**
     */
    async apiBillsPostRaw(requestParameters: ApiBillsPostRequest): Promise<runtime.ApiResponse<BillViewModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Bills`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BillViewModelToJSON(requestParameters.billViewModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BillViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiBillsPost(requestParameters: ApiBillsPostRequest): Promise<BillViewModel> {
        const response = await this.apiBillsPostRaw(requestParameters);
        return await response.value();
    }

}
