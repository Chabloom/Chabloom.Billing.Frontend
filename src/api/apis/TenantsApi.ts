/* tslint:disable */
/* eslint-disable */
/**
 * Chabloom Payments
 * Chabloom Payments v1 API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    TenantViewModel,
    TenantViewModelFromJSON,
    TenantViewModelToJSON,
} from '../models';

export interface ApiTenantsIdGetRequest {
    id: string;
}

export interface ApiTenantsIdPutRequest {
    id: string;
    tenantViewModel?: TenantViewModel;
}

export interface ApiTenantsPostRequest {
    tenantViewModel?: TenantViewModel;
}

/**
 * TenantsApi - interface
 * 
 * @export
 * @interface TenantsApiInterface
 */
export interface TenantsApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    apiTenantsGetRaw(): Promise<runtime.ApiResponse<Array<TenantViewModel>>>;

    /**
     */
    apiTenantsGet(): Promise<Array<TenantViewModel>>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    apiTenantsIdGetRaw(requestParameters: ApiTenantsIdGetRequest): Promise<runtime.ApiResponse<TenantViewModel>>;

    /**
     */
    apiTenantsIdGet(requestParameters: ApiTenantsIdGetRequest): Promise<TenantViewModel>;

    /**
     * 
     * @param {string} id 
     * @param {TenantViewModel} [tenantViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    apiTenantsIdPutRaw(requestParameters: ApiTenantsIdPutRequest): Promise<runtime.ApiResponse<void>>;

    /**
     */
    apiTenantsIdPut(requestParameters: ApiTenantsIdPutRequest): Promise<void>;

    /**
     * 
     * @param {TenantViewModel} [tenantViewModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    apiTenantsPostRaw(requestParameters: ApiTenantsPostRequest): Promise<runtime.ApiResponse<TenantViewModel>>;

    /**
     */
    apiTenantsPost(requestParameters: ApiTenantsPostRequest): Promise<TenantViewModel>;

}

/**
 * 
 */
export class TenantsApi extends runtime.BaseAPI implements TenantsApiInterface {

    /**
     */
    async apiTenantsGetRaw(): Promise<runtime.ApiResponse<Array<TenantViewModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TenantViewModelFromJSON));
    }

    /**
     */
    async apiTenantsGet(): Promise<Array<TenantViewModel>> {
        const response = await this.apiTenantsGetRaw();
        return await response.value();
    }

    /**
     */
    async apiTenantsIdGetRaw(requestParameters: ApiTenantsIdGetRequest): Promise<runtime.ApiResponse<TenantViewModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTenantsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTenantsIdGet(requestParameters: ApiTenantsIdGetRequest): Promise<TenantViewModel> {
        const response = await this.apiTenantsIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTenantsIdPutRaw(requestParameters: ApiTenantsIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTenantsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TenantViewModelToJSON(requestParameters.tenantViewModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTenantsIdPut(requestParameters: ApiTenantsIdPutRequest): Promise<void> {
        await this.apiTenantsIdPutRaw(requestParameters);
    }

    /**
     */
    async apiTenantsPostRaw(requestParameters: ApiTenantsPostRequest): Promise<runtime.ApiResponse<TenantViewModel>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantViewModelToJSON(requestParameters.tenantViewModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiTenantsPost(requestParameters: ApiTenantsPostRequest): Promise<TenantViewModel> {
        const response = await this.apiTenantsPostRaw(requestParameters);
        return await response.value();
    }

}
