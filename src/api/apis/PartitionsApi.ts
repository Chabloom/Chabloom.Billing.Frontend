// tslint:disable
/**
 * Chabloom Payments
 * Chabloom Payments v1 API
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    PartitionViewModel,
    ProblemDetails,
} from '../models';

export interface ApiPartitionsIdGetRequest {
    id: string;
}

export interface ApiPartitionsIdPutRequest {
    id: string;
    partitionViewModel?: PartitionViewModel;
}

export interface ApiPartitionsPostRequest {
    partitionViewModel?: PartitionViewModel;
}

/**
 * no description
 */
export class PartitionsApi extends BaseAPI {

    /**
     */
    apiPartitionsGet(): Observable<Array<PartitionViewModel>>
    apiPartitionsGet(opts?: OperationOpts): Observable<RawAjaxResponse<Array<PartitionViewModel>>>
    apiPartitionsGet(opts?: OperationOpts): Observable<Array<PartitionViewModel> | RawAjaxResponse<Array<PartitionViewModel>>> {
        return this.request<Array<PartitionViewModel>>({
            url: '/api/Partitions',
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    apiPartitionsIdGet({ id }: ApiPartitionsIdGetRequest): Observable<PartitionViewModel>
    apiPartitionsIdGet({ id }: ApiPartitionsIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PartitionViewModel>>
    apiPartitionsIdGet({ id }: ApiPartitionsIdGetRequest, opts?: OperationOpts): Observable<PartitionViewModel | RawAjaxResponse<PartitionViewModel>> {
        throwIfNullOrUndefined(id, 'id', 'apiPartitionsIdGet');

        return this.request<PartitionViewModel>({
            url: '/api/Partitions/{id}'.replace('{id}', encodeURI(id)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     */
    apiPartitionsIdPut({ id, partitionViewModel }: ApiPartitionsIdPutRequest): Observable<void>
    apiPartitionsIdPut({ id, partitionViewModel }: ApiPartitionsIdPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    apiPartitionsIdPut({ id, partitionViewModel }: ApiPartitionsIdPutRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(id, 'id', 'apiPartitionsIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<void>({
            url: '/api/Partitions/{id}'.replace('{id}', encodeURI(id)),
            method: 'PUT',
            headers,
            body: partitionViewModel,
        }, opts?.responseOpts);
    };

    /**
     */
    apiPartitionsPost({ partitionViewModel }: ApiPartitionsPostRequest): Observable<PartitionViewModel>
    apiPartitionsPost({ partitionViewModel }: ApiPartitionsPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<PartitionViewModel>>
    apiPartitionsPost({ partitionViewModel }: ApiPartitionsPostRequest, opts?: OperationOpts): Observable<PartitionViewModel | RawAjaxResponse<PartitionViewModel>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<PartitionViewModel>({
            url: '/api/Partitions',
            method: 'POST',
            headers,
            body: partitionViewModel,
        }, opts?.responseOpts);
    };

}
